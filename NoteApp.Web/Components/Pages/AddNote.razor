@page "/add-note"
@inject NoteApp.Logic.Domain.Entity.Note.Service.Interface.INoteService NS
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using System.Data
@using System.Net.Http.Json
@rendermode InteractiveServer


<PageTitle>Home</PageTitle>

<h1>New Note</h1>

<EditForm Model="_note" OnValidSubmit="HandleSubmit" FormName="CreateNoteForm">
    
    <DataAnnotationsValidator/>
    <ValidationSummary/>
            
    <div>
        <label>Title</label>
        <InputText class="form-control " @bind-Value="_note.Title"/>
        <ValidationMessage For="@(() => _note.Title)"/>
    </div>
    
            
    <div>
        <label>Content</label>
        <InputTextArea class="form-control " rows="10" @bind-Value="_note.Content"/>
        <ValidationMessage For="@(() => _note.Content)"/>
    </div>
    
    <button type="submit" class="btn btn-primary">Add Note</button>
    
</EditForm>
@if (!string.IsNullOrWhiteSpace(_message))
{
    <div class="mt-3"> @_message</div>
}
@code{

    private CreateNoteDTO _note = new ();
    private string? _message;

    private async Task HandleSubmit()
    {
        if (!string.IsNullOrWhiteSpace(_note.Title))
        {
            var newNote = await NS.CreateNoteAsync(_note.Title, _note.Content);
            
            if (newNote.Title == _note.Title)
            {
                _message = "Note has successfully been Created";
                _note = new();
            }
        }
        else
        {
            _message = $"Note title was Empty or illegal Characters: Title({_note.Title})";
        }
        
        
        // var client = CF.CreateClient("NoteAppAPI");
        // var res = await client.PostAsJsonAsync("api/notes", _note);
        //
        // _message = res.IsSuccessStatusCode
        //     ? "Note Create Successfully!"
        //     : $"Failed: {(int)res.StatusCode} {res.ReasonPhrase}\n{await res.Content.ReadAsStringAsync()}";
        //
        // if (res.IsSuccessStatusCode) _note = new();
    }

    public class CreateNoteDTO
    {
        [Required, MinLength(3)]
        public string Title { get; set; } = string.Empty;

        public string Content { get; set; } = string.Empty;
        
        public DateTime Created { get; set; } = DateTime.Now;

        public DateTime Modified { get; set; } = DateTime.Now;

    }
    

}
