@page "/edit-note/{id:int}"
@inject NoteApp.Logic.Domain.Entity.Note.Service.Interface.INoteService NS
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using System.Data
@using System.Net.Http.Json
@using NoteApp.Logic.Domain.Entity.Note.Models
@rendermode InteractiveServer


<PageTitle>Home</PageTitle>

<h1>Edit Note</h1>

@* What do i put to call the onSubmit*@
@if (_newNote is not null)
{
    <form @onsubmit="HandleSubmit" class="d-flex flex-column gap-3">


        <div class="">
            <label for="title">Title</label>
            <input id="title" name="title" type="text" required="required" min="3" @bind="_newNote.Title"
                   class="d-inline-block w-100"/>
        </div>


        <div>
            <label for="content">Content</label>
            <textarea rows="10" id="content" @bind="_newNote.Content" 
            class="d-inline-block w-100"
            ></textarea>
        </div>

        <button type="submit" class="btn btn-secondary">Update Note</button>

    </form>
}
else
{
    <p>Loading...</p>
}

    
    
    @if (!string.IsNullOrWhiteSpace(_message))
{
    <div class="mt-3"> @_message</div>
}
@code{

    private UpdatedNoteDTO _newNote = new ();
    private NoteEntity _preData = new NoteEntity();
    private string? _message;

    // [Parameter]
    [Parameter] public int Id { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        // var client = CF.CreateClient("NoteAppAPI");
        // _newNote = await client.GetFromJsonAsync<AddNote.CreateNoteDTO>($"api/notes/{Id}");

        

        if (await NS.GetByIdAsync(Id) != null)
        {
            _preData = await NS.GetByIdAsync(Id);
            
            _newNote.Title = _preData.Title;
            _newNote.Content = _preData.Content;
            _newNote.Created = _preData.Created;
            _newNote.Id = _preData.Id;
        }
        else
        {
            _message = $"Note for Id({Id} was not found)";
        }
        
    }
    
    private async Task HandleSubmit()
    {
        
        // Should i read the record first?
        
        
        // Is the correct format of update
        if (_newNote.Title == null)
        {
            _message = $"Title is empty: Title = {_newNote.Title}";
        }

        var updatedNote =  await NS.UpdateNote(new NoteEntity
        {
            Id = _newNote.Id,
            Title = _newNote.Title,
            Content = _newNote.Content,
            Created = _preData.Created
        });

        // var res = await client.PostAsJsonAsync("api/notes", _newNote);
        //
        // _message = res.IsSuccessStatusCode
        //     ? "Note Create Successfully!"
        //     : $"Failed: {(int)res.StatusCode} {res.ReasonPhrase}\n{await res.Content.ReadAsStringAsync()}";
        
        if (updatedNote.Id == _newNote.Id)
        {
            Console.WriteLine("Update Complete");
            _message = $"Update was successful\n " +
                       $"Return to Notes listing Page";
        }
        else
        {
            _message = $"Things might have not gone right";
        }
    }

    public class UpdatedNoteDTO
    {
        public int Id { get; set; }
        [Required, MinLength(3)]
        public string Title { get; set; } = string.Empty;

        public string Content { get; set; } = string.Empty;
        
        public DateTime Created { get; set; } = DateTime.Now;

        public DateTime Modified { get; set; } = DateTime.Now;

    }
    

}
